[{"D:\\TFC-front\\Tetris-react\\Stepped Solutions\\react-tetris - FINISHED\\src\\index.js":"1","D:\\TFC-front\\Tetris-react\\Stepped Solutions\\react-tetris - FINISHED\\src\\components\\GenerateWallet.js":"2","D:\\TFC-front\\Tetris-react\\Stepped Solutions\\react-tetris - FINISHED\\src\\components\\NavBar.js":"3","D:\\TFC-front\\Tetris-react\\Stepped Solutions\\react-tetris - FINISHED\\src\\components\\History.js":"4","D:\\TFC-front\\Tetris-react\\Stepped Solutions\\react-tetris - FINISHED\\src\\components\\Tetris.js":"5","D:\\TFC-front\\Tetris-react\\Stepped Solutions\\react-tetris - FINISHED\\src\\components\\Send.js":"6","D:\\TFC-front\\Tetris-react\\Stepped Solutions\\react-tetris - FINISHED\\src\\components\\LoadWallet.js":"7"},{"size":174,"mtime":1607362043275,"results":"8","hashOfConfig":"9"},{"size":1262,"mtime":1607378689035,"results":"10","hashOfConfig":"9"},{"size":2211,"mtime":1607382907335,"results":"11","hashOfConfig":"9"},{"size":2307,"mtime":1607398576948,"results":"12","hashOfConfig":"9"},{"size":6880,"mtime":1607461794099,"results":"13","hashOfConfig":"9"},{"size":7877,"mtime":1607470812706,"results":"14","hashOfConfig":"9"},{"size":3238,"mtime":1607470448615,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1q4o87h",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\TFC-front\\Tetris-react\\Stepped Solutions\\react-tetris - FINISHED\\src\\index.js",[],["33","34"],"D:\\TFC-front\\Tetris-react\\Stepped Solutions\\react-tetris - FINISHED\\src\\components\\GenerateWallet.js",[],"D:\\TFC-front\\Tetris-react\\Stepped Solutions\\react-tetris - FINISHED\\src\\components\\NavBar.js",[],"D:\\TFC-front\\Tetris-react\\Stepped Solutions\\react-tetris - FINISHED\\src\\components\\History.js",["35"],"import React from 'react';\r\nimport s from \"./styles/OtherElements.module.css\";\r\nimport st from \"./styles/History.module.css\";\r\nimport Redirect from \"react-router-dom/es/Redirect\";\r\nimport {useInterval} from \"../hooks/useInterval\";\r\n\r\nexport function History(props) {\r\n\r\n    function makeColumns(row) {\r\n        return(<><td>{row.sender}</td><td>{row.amount}</td><td>{row.receiver}</td><td>{row.status}</td></>)\r\n    }\r\n\r\n    function httpGet()\r\n    {\r\n        console.log(\"httGet\");\r\n        var xmlHttp = new XMLHttpRequest();\r\n        xmlHttp.open( \"GET\", 'http://localhost:8080/api//transaction/user?address=' + props.walletName, false ); // false for synchronous request\r\n        xmlHttp.send( null );\r\n        let json = JSON.parse(xmlHttp.responseText);\r\n        let result = []\r\n        for(var i = 0; i < json.length; i++) {\r\n            var obj = json[i];\r\n            result.push({sender: obj.sender, amount: obj.amount, receiver: obj.receiver, status: obj.block==\"0\"?\"Pending\":\"Included in block \"+obj.block});\r\n            console.log(obj.amount);\r\n        }\r\n        console.log(json);\r\n        props.setHistory(result);\r\n        console.log(\"buff!\");\r\n        return 0;\r\n    }\r\n\r\n    useInterval(() => {\r\n        httpGet();\r\n    }, 1000);\r\n\r\n    let tableTemplate = props.history.map((row, i) => {\r\n        return <tr key={i}>{makeColumns(row)}</tr>\r\n    })\r\n\r\n    if (!props.authorized) return <Redirect to={'/generate-wallet'}/>\r\n    else{\r\n    return (\r\n        <div>\r\n            <div className={`${s.descriptionTextStyle} ${st.divContentWrapper}`}>\r\n                <h2 className={s.mainTextStyle}>History</h2>\r\n            </div>\r\n            <div className={st.divContentWrapper}>\r\n                <table border={3} className={s.tableStyle}>\r\n                    <thead>\r\n                    <tr>\r\n                        <th className={s.thStyle}>Sender</th>\r\n                        <th className={s.thStyle}>Amount (TFC)</th>\r\n                        <th className={s.thStyle}>Receiver</th>\r\n                        <th className={s.thStyle}>Status</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {tableTemplate}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )}\r\n}","D:\\TFC-front\\Tetris-react\\Stepped Solutions\\react-tetris - FINISHED\\src\\components\\Tetris.js",["36"],"import React, { useState } from 'react';\r\nimport { createStage, checkCollision } from '../gameHelpers';\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\r\n\r\n// Custom Hooks\r\nimport { useInterval } from '../hooks/useInterval';\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage';\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\n\r\n// Components\r\nimport Stage from './Stage';\r\nimport Display from './Display';\r\nimport StartButton from './StartButton';\r\nimport Redirect  from \"react-router-dom/es/Redirect\";\r\n\r\nconst Tetris = (props) => {\r\n\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n  const [score, setScore, goal, setGoal, rows, setRows, level, setLevel] = useGameStatus(\r\n    rowsCleared\r\n  );\r\n\r\n\r\n\r\n  const movePlayer = dir => {\r\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n      updatePlayerPos({ x: dir, y: 0 });\r\n    }\r\n  };\r\n\r\n  const keyUp = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      // Activate the interval again when user releases down arrow.\r\n      if (keyCode === 40) {\r\n        setDropTime(1000 / (level + 1));\r\n      }\r\n    }\r\n  };\r\n\r\n\r\n  const startGame = () => {\r\n    // Reset everything\r\n    let xhr2 = new XMLHttpRequest()\r\n    xhr2.addEventListener('load', () => {\r\n      props.setBalanceValue(xhr2.responseText);\r\n      console.log(xhr2.responseText);\r\n    })\r\n    let request = 'http://localhost:8080/api/balance?address='+props.walletName;\r\n    xhr2.open('GET', request);\r\n    xhr2.send();\r\n    setStage(createStage());\r\n    setDropTime(1000);\r\n    props.setSolve('');\r\n    resetPlayer();\r\n      /*var xhr = new XMLHttpRequest()\r\n      xhr.addEventListener('load', () => {\r\n        setScore(JSON.parse(xhr.responseText)[\"fee\"])\r\n      })\r\n      xhr.open('GET', 'http://localhost:8080/api/transaction?hash=KEK')\r\n      xhr.send()*/\r\n    setScore(0);\r\n    setLevel(0);\r\n    setRows(0);\r\n    setGameOver(false);\r\n  };\r\n\r\n  const downGoal = () => {\r\n    var xhr = new XMLHttpRequest()\r\n    xhr.addEventListener('load', () => {\r\n      setGoal(xhr.responseText);\r\n    })\r\n    xhr.open('GET', 'http://localhost:8080/api/goal')\r\n    xhr.send()\r\n  }\r\n\r\n  function createNewBlock(){\r\n    var xhr = new XMLHttpRequest()\r\n         xhr.addEventListener('load', () => {\r\n           var json = JSON.parse(xhr.responseText);\r\n           //json.solution = props.solve;\r\n           let jsonString = JSON.stringify(json);\r\n           let hexstr = '';\r\n           const input = new TextEncoder('utf-8').encode(jsonString);\r\n           console.log(input);\r\n           crypto.subtle.digest('SHA-256', input)\r\n               .then(function(digest) {\r\n                 let view = new DataView(digest);\r\n                 let hexstr = '';\r\n                 for(let i = 0; i < view.byteLength; i++) {\r\n                   let b = view.getUint8(i);\r\n                   hexstr += '0123456789abcdef'[(b & 0xf0) >> 4];\r\n                   hexstr += '0123456789abcdef'[(b & 0x0f)];\r\n                 }\r\n                 console.log(hexstr);\r\n\r\n                 json.blockHeader.hash = hexstr;\r\n                 console.log(JSON.stringify(json));\r\n\r\n                 var xhr2 = new XMLHttpRequest();\r\n                 xhr2.open(\"POST\", 'http://localhost:8080/api/block/push', true);\r\n                 xhr2.setRequestHeader('Content-Type', 'application/json');\r\n                 xhr2.setRequestHeader('Access-Control-Allow-Origin', '*');\r\n                 let bod = JSON.stringify(json);\r\n                 xhr2.send(bod);\r\n                 console.log(JSON.stringify(json));\r\n\r\n                 xhr2 = new XMLHttpRequest()\r\n                 xhr2.addEventListener('load', () => {\r\n                   props.setBalanceValue(xhr2.responseText);\r\n                   console.log(xhr2.responseText);\r\n                 })\r\n                 let request = 'http://localhost:8080/api/balance?address='+props.walletName;\r\n                 xhr2.open('GET', request);\r\n                 xhr2.send();\r\n\r\n\r\n               })\r\n               .catch(function(err) {\r\n                 console.error(err);\r\n               });\r\n           console.log(json);\r\n         })\r\n         xhr.open('GET', 'http://localhost:8080/api/block/prepared?miner=' + props.walletName);\r\n         xhr.send()\r\n  }\r\n\r\n  const drop = () => {\r\n    // Increase level when player has cleared 10 rows\r\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n      updatePlayerPos({ x: 0, y: 1, collided: false });\r\n    } else {\r\n      // Game over!\r\n      if (player.pos.y < 1) {\r\n        console.log('GAME OVER!!!');\r\n        if (score >= parseInt(goal))\r\n          createNewBlock(props.solve);\r\n        console.log(score >= parseInt(goal));\r\n        console.log(parseInt(goal));\r\n\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n      }else {\r\n        const tetrominos = 'IJLOSTZ';\r\n        props.setSolve(props.solve + (\" \" + (player.pos.x + 1).toString() + \" \" + player.pos.y.toString() + \" \" + player.rot.toString() + \" \" + tetrominos[Math.floor(Math.random() * tetrominos.length)]));\r\n        console.log(props.solve);\r\n        updatePlayerPos({x: 0, y: 0, collided: true});\r\n      }\r\n    }\r\n  };\r\n\r\n  const dropPlayer = () => {\r\n    // We don't need to run the interval when we use the arrow down to\r\n    // move the tetromino downwards. So deactivate it for now.\r\n    setDropTime(null);\r\n    drop();\r\n  };\r\n\r\n  // This one starts the game\r\n  // Custom hook by Dan Abramov\r\n  useInterval(() => {\r\n    drop();\r\n  }, dropTime);\r\n\r\n  useInterval(() => {\r\n    downGoal();\r\n  }, 1000);\r\n\r\n  const move = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 37) {\r\n        movePlayer(-1);\r\n      } else if (keyCode === 39) {\r\n        movePlayer(1);\r\n      } else if (keyCode === 40) {\r\n        dropPlayer();\r\n      } else if (keyCode === 38) {\r\n        playerRotate(stage, 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  if (!props.authorized) return <Redirect to={'/generate-wallet'}/>\r\n  else return (\r\n    <StyledTetrisWrapper\r\n      role=\"button\"\r\n      tabIndex=\"0\"\r\n      onKeyDown={e => move(e)}\r\n      onKeyUp={keyUp}\r\n    >\r\n      <StyledTetris>\r\n        <Stage stage={stage} />\r\n        <aside>\r\n          {gameOver ? (\r\n            <Display gameOver={gameOver} text=\"Game Over\" />\r\n          ) : (\r\n            <div>\r\n              <Display text={`Score: ${score}`} />\r\n              <Display text={`Goal: ${goal}`} />\r\n              <Display text={`Rows: ${rows}`} />\r\n              <Display text={`Level: ${level}`} />\r\n            </div>\r\n          )}\r\n          <StartButton callback={startGame} />\r\n        </aside>\r\n      </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n  );\r\n};\r\n\r\nexport default Tetris;\r\n","D:\\TFC-front\\Tetris-react\\Stepped Solutions\\react-tetris - FINISHED\\src\\components\\Send.js",[],"D:\\TFC-front\\Tetris-react\\Stepped Solutions\\react-tetris - FINISHED\\src\\components\\LoadWallet.js",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":23,"column":107,"nodeType":"43","messageId":"44","endLine":23,"endColumn":109},{"ruleId":"45","severity":1,"message":"46","line":87,"column":16,"nodeType":"47","messageId":"48","endLine":87,"endColumn":22},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'hexstr' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]